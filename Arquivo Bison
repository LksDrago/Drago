%{
#include <stdio.h>
#include <stdlib.h>

// Declarações
int yylex(void);
int yyerror(const char *s);
%}

%token NUM
%left '+' '-'
%left '*' '/'
%right UMINUS

%%
calculation:
    | calculation expression '\n' { printf("Resultado: %lf\n", $2); }
    ;

expression:
      NUM                 { $$ = $1; }
    | expression '+' expression { $$ = $1 + $3; }
    | expression '-' expression { $$ = $1 - $3; }
    | expression '*' expression { $$ = $1 * $3; }
    | expression '/' expression { 
        if ($3 == 0) {
            fprintf(stderr, "Erro: Divisao por zero\n");
            exit(1);
        }
        $$ = $1 / $3;
    }
    | '-' expression %prec UMINUS { $$ = -$2; }
    | '(' expression ')'          { $$ = $2; }
    ;
%%

int yyerror(const char *s) {
    fprintf(stderr, "Erro de sintaxe: %s\n", s);
    return 0;
}

int main() {
    printf("Digite expressoes matematicas (pressione Ctrl+C para sair):\n");
    yyparse();
    return 0;
}
